/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gram_py = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[2,5,7,47,48,49,50,51],$V8=[11,42],$V9=[2,43],$Va=[1,26],$Vb=[1,46],$Vc=[1,43],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,41],$Vk=[1,42],$Vl=[1,44],$Vm=[1,45],$Vn=[2,8,14,18,20,21,22,24,27,32,33,37,39,44,46,47,48,49,50,51],$Vo=[1,67],$Vp=[1,71],$Vq=[1,73],$Vr=[1,65],$Vs=[1,66],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,74],$Vx=[1,78],$Vy=[1,79],$Vz=[23,31,42],$VA=[1,108],$VB=[1,102],$VC=[1,103],$VD=[1,101],$VE=[1,99],$VF=[1,100],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[11,23,31,40,41,42,45,60,61,62,63,64,65,66],$VL=[2,40],$VM=[8,9,41,54,55,56,57,58,60],$VN=[1,140],$VO=[11,23],$VP=[1,165],$VQ=[1,166],$VR=[14,44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instr_methods":4,"EOF":5,"instr_meth":6,"VOID":7,"IDENTIFICADOR":8,"PAR_A":9,"params":10,"PAR_C":11,"LLAVE_A":12,"instr_general":13,"LLAVE_C":14,"typo_var":15,"MAIN":16,"instr":17,"IF":18,"asignacion":19,"ELSE":20,"WHILE":21,"DO":22,"PUNTO_C":23,"CONSOLE":24,"PUNTO":25,"WRITE":26,"FOR":27,"var_for":28,"asignacion_icr":29,"lista_v":30,"IGUAL":31,"BREAK":32,"RETURN":33,"asignacion_ret":34,"sms":35,"params2":36,"SWITCH":37,"sw_op":38,"CONTINUE":39,"MAS":40,"MENOS":41,"COMA":42,"casos":43,"CASE":44,"DOS_P":45,"DEFAULT":46,"INT":47,"DOUBLE":48,"STRING":49,"CHAR":50,"BOOLEAN":51,"symb":52,"valx":53,"ENTERO":54,"DECIMAL":55,"TRUE":56,"FALSE":57,"CADENA":58,"unar_op":59,"NOT":60,"AND":61,"OR":62,"POR":63,"DIV":64,"MAYOR":65,"MENOR":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"VOID",8:"IDENTIFICADOR",9:"PAR_A",11:"PAR_C",12:"LLAVE_A",14:"LLAVE_C",16:"MAIN",18:"IF",20:"ELSE",21:"WHILE",22:"DO",23:"PUNTO_C",24:"CONSOLE",25:"PUNTO",26:"WRITE",27:"FOR",31:"IGUAL",32:"BREAK",33:"RETURN",37:"SWITCH",39:"CONTINUE",40:"MAS",41:"MENOS",42:"COMA",44:"CASE",45:"DOS_P",46:"DEFAULT",47:"INT",48:"DOUBLE",49:"STRING",50:"CHAR",51:"BOOLEAN",54:"ENTERO",55:"DECIMAL",56:"TRUE",57:"FALSE",58:"CADENA",60:"NOT",61:"AND",62:"OR",63:"POR",64:"DIV",65:"MAYOR",66:"MENOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,8],[6,8],[6,7],[6,2],[13,2],[13,1],[17,7],[17,8],[17,4],[17,7],[17,9],[17,7],[17,11],[17,5],[17,3],[17,2],[17,3],[17,3],[17,5],[17,4],[17,7],[17,2],[17,2],[34,0],[34,1],[29,2],[35,2],[35,2],[30,3],[30,1],[38,2],[38,1],[43,4],[43,3],[28,4],[28,3],[36,0],[36,3],[36,1],[10,0],[10,4],[10,2],[15,1],[15,1],[15,1],[15,1],[15,1],[19,3],[19,1],[53,1],[53,1],[53,1],[53,4],[53,1],[53,1],[53,1],[53,3],[53,1],[59,2],[59,2],[52,1],[52,1],[52,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,2],[52,2],[52,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
this.$=instruccionesPY.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]); in_var("Void", $$[$0-6]);
break;
case 5:
this.$=instruccionesPY.nuevoFuncion($$[$0-6],$$[$0-4],$$[$0-7],$$[$0-1]); in_var("Funcion", $$[$0-6]);
break;
case 6:
this.$=instruccionesPY.nuevoMetodo($$[$0-5],"vacio",$$[$0-1]); in_var("main", "main");
break;
case 7:
  in_err("Sintactico",this._$.first_line,this._$.first_column,yytext); 
break;
case 8:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 9:
 this.$ = [$$[$0]]; 
break;
case 10:
this.$=instruccionesPY.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 11:
this.$=instruccionesPY.nuevoElseIf($$[$0-4],$$[$0-1]);
break;
case 12:
this.$=instruccionesPY.nuevoElse($$[$0-1]);
break;
case 13:
this.$=instruccionesPY.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 14:
this.$=instruccionesPY.nuevoDoWhile($$[$0-2],$$[$0-6]);
break;
case 15:
this.$=instruccionesPY.nuevoPrint("ln",$$[$0-2]);
break;
case 16:
this.$=instruccionesPY.nuevoFor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 17:
this.$=instruccionesPY.nuevoVal($$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 18:
this.$=instruccionesPY.nuevoVal($$[$0-2],$$[$0-1],"");  
break;
case 19:
this.$=instruccionesPY.nuevoBreak();
break;
case 20:
this.$=instruccionesPY.nuevoReturn($$[$0-1]);
break;
case 21:
this.$=instruccionesPY.nuevaUnar($$[$0-1],$$[$0-2]);
break;
case 22:
this.$=instruccionesPY.nuevollamada($$[$0-4],$$[$0-2]);
break;
case 23:
this.$=instruccionesPY.nuevoAsig($$[$0-3],$$[$0-1]);
break;
case 24:
this.$=instruccionesPY.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 25:
this.$=instruccionesPY.nuevoContinue();
break;
case 26:
  
break;
case 28: case 46: case 47: case 48: case 49: case 50: case 53: case 54: case 55: case 57: case 58: case 59:
this.$=$$[$0]
break;
case 29:
this.$=[$$[$0-1],$$[$0]];
break;
case 30:
this.$="++";
break;
case 31:
this.$="--";
break;
case 32:
$$[$0-2].push($$[$0]);
break;
case 33:
this.$=[$$[$0]]; 
break;
case 34:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 35: case 42: case 45:
this.$=[$$[$0]];
break;
case 36:
this.$=instruccionesPY.nuevoCaso($$[$0-2],$$[$0]);
break;
case 37:
this.$=instruccionesPY.nuevoDefault($$[$0]);
break;
case 38:
this.$=[$$[$0-2],$$[$0]];
break;
case 39:
this.$=[$$[$0-2],$$[$0]]
break;
case 40: case 43:
this.$="";
break;
case 41:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 44:
$$[$0-3].push($$[$0]); this.$=$$[$0-3];
break;
case 51:
this.$=instruccionesPY.nuevaOpr($$[$0-2],$$[$0],$$[$0-1]);
break;
case 52: case 61:
this.$=$$[$0];
break;
case 56:
this.$=instruccionesPY.nuevollamada($$[$0-3],$$[$0-1]);
break;
case 60:
this.$=instruccionesPY.nuevoParentesis($$[$0-1]);
break;
case 62:
this.$=instruccionesPY.nuevaUnar("-",$$[$0]);
break;
case 63:
this.$=instruccionesPY.nuevaUnar("!",$$[$0]);
break;
case 64:
this.$=" and ";
break;
case 65:
this.$=" or ";
break;
case 66:
this.$=" not ";
break;
case 67:
this.$=" + ";
break;
case 68:
this.$=" - ";
break;
case 69:
this.$=" * ";
break;
case 70:
this.$=" / ";
break;
case 71:
this.$=">";
break;
case 72:
this.$="<";
break;
case 73:
this.$=" >= ";
break;
case 74:
this.$=" <= ";
break;
case 75:
this.$=" == ";
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,15:5,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{1:[3]},{2:$V0,5:[1,12],6:13,7:$V1,15:5,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($V7,[2,3]),{8:[1,14],16:[1,15]},{8:[1,16]},{14:[1,17]},{8:[2,46]},{8:[2,47]},{8:[2,48]},{8:[2,49]},{8:[2,50]},{1:[2,1]},o($V7,[2,2]),{9:[1,18]},{9:[1,19]},{9:[1,20]},o($V7,[2,7]),o($V8,$V9,{10:21,15:22,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6}),{11:[1,23]},o($V8,$V9,{15:22,10:24,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6}),{11:[1,25],42:$Va},{8:[1,27]},{12:[1,28]},{11:[1,29],42:$Va},{12:[1,30]},{15:31,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($V8,[2,45]),{2:$Vb,8:$Vc,13:32,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{12:[1,47]},{2:$Vb,8:$Vc,13:48,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{8:[1,49]},{2:$Vb,8:$Vc,14:[1,50],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($Vn,[2,9]),{9:[1,52]},{12:[1,54],18:[1,53]},{9:[1,55]},{12:[1,56]},{25:[1,57]},{9:[1,58]},{8:[1,60],30:59},{23:[1,61]},{8:$Vo,9:$Vp,19:63,23:[2,27],34:62,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{9:[1,76],31:[1,77],35:75,40:$Vx,41:$Vy},{9:[1,80]},{23:[1,81]},{23:[1,82]},{2:$Vb,8:$Vc,13:83,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{2:$Vb,8:$Vc,14:[1,84],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($V8,[2,44]),o($V7,[2,6]),o($Vn,[2,8]),{8:$Vo,9:$Vp,19:85,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{9:[1,86]},{2:$Vb,8:$Vc,13:87,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{8:$Vo,9:$Vp,19:88,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{2:$Vb,8:$Vc,13:89,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{26:[1,90]},{8:[1,93],15:92,28:91,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{23:[1,95],31:[1,94],42:[1,96]},o($Vz,[2,33]),o($Vn,[2,19]),{23:[1,97]},{23:[2,28],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55],{9:[1,109]}),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),{8:$Vo,9:$Vp,19:110,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},o($VK,[2,61]),{8:$Vo,9:$Vp,41:$Vq,53:111,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{8:$Vo,9:$Vp,41:$Vq,53:112,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{23:[1,113]},o($V8,$VL,{53:64,59:72,36:114,19:115,8:$Vo,9:$Vp,41:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw}),{8:$Vo,9:$Vp,19:116,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{40:[1,117]},{41:[1,118]},{8:$Vo,9:$Vp,19:119,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},o($Vn,[2,25]),o($Vn,[2,26]),{2:$Vb,8:$Vc,14:[1,120],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($V7,[2,4]),{11:[1,121],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{8:$Vo,9:$Vp,19:122,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{2:$Vb,8:$Vc,14:[1,123],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{11:[1,124],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{2:$Vb,8:$Vc,14:[1,125],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{9:[1,126]},{23:[1,127]},{8:[1,128]},{31:[1,129]},{8:$Vo,9:$Vp,19:130,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},o($Vn,[2,18]),{8:[1,131]},o($Vn,[2,20]),{8:$Vo,9:$Vp,19:132,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},o($VM,[2,64]),o($VM,[2,65]),{31:[1,133]},o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,69]),o($VM,[2,70]),o($VM,[2,71],{31:[1,134]}),o($VM,[2,72],{31:[1,135]}),{31:[1,136]},o($V8,$VL,{53:64,59:72,19:115,36:137,8:$Vo,9:$Vp,41:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw}),{11:[1,138],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($VK,[2,62]),o($VK,[2,63]),o($Vn,[2,21]),{11:[1,139],42:$VN},o($V8,[2,42],{52:98,31:$VA,40:$VB,41:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{23:[1,141],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($VO,[2,30]),o($VO,[2,31]),{11:[1,142],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($V7,[2,5]),{12:[1,143]},{11:[1,144],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vn,[2,12]),{12:[1,145]},{21:[1,146]},{8:$Vo,9:$Vp,19:147,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{8:$Vo,9:$Vp,19:148,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{31:[1,149]},{8:$Vo,9:$Vp,19:150,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{23:[1,151],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vz,[2,32]),o([11,23,42,45],[2,51],{52:98,31:$VA,40:$VB,41:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VM,[2,66]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),{11:[1,152],42:$VN},o($VK,[2,60]),{23:[1,153]},{8:$Vo,9:$Vp,19:154,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},o($Vn,[2,23]),{12:[1,155]},{2:$Vb,8:$Vc,13:156,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{12:[1,157]},{2:$Vb,8:$Vc,13:158,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{9:[1,159]},{11:[1,160],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{23:[1,161],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{8:$Vo,9:$Vp,19:162,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{23:[2,39],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vn,[2,17]),o($VK,[2,56]),o($Vn,[2,22]),o($V8,[2,41],{52:98,31:$VA,40:$VB,41:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{38:163,43:164,44:$VP,46:$VQ},{2:$Vb,8:$Vc,14:[1,167],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{2:$Vb,8:$Vc,13:168,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{2:$Vb,8:$Vc,14:[1,169],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},{8:$Vo,9:$Vp,19:170,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{23:[1,171]},{8:[1,173],29:172},{23:[2,38],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{14:[1,174],43:175,44:$VP,46:$VQ},o($VR,[2,35]),{8:$Vo,9:$Vp,19:176,41:$Vq,53:64,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:72,60:$Vw},{45:[1,177]},o($Vn,[2,10]),{2:$Vb,8:$Vc,14:[1,178],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($Vn,[2,13]),{11:[1,179],31:$VA,40:$VB,41:$VC,52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vn,[2,15]),{11:[1,180]},{35:181,40:$Vx,41:$Vy},o($Vn,[2,24]),o($VR,[2,34]),{31:$VA,40:$VB,41:$VC,45:[1,182],52:98,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{2:$Vb,8:$Vc,13:183,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($Vn,[2,11]),{23:[1,184]},{12:[1,185]},{11:[2,29]},{2:$Vb,8:$Vc,13:186,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($VR,[2,37],{15:40,17:51,2:$Vb,8:$Vc,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6}),o($Vn,[2,14]),{2:$Vb,8:$Vc,13:187,15:40,17:33,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($VR,[2,36],{15:40,17:51,2:$Vb,8:$Vc,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6}),{2:$Vb,8:$Vc,14:[1,188],15:40,17:51,18:$Vd,20:$Ve,21:$Vf,22:$Vg,24:$Vh,27:$Vi,32:$Vj,33:$Vk,37:$Vl,39:$Vm,47:$V2,48:$V3,49:$V4,50:$V5,51:$V6},o($Vn,[2,16])],
defaultActions: {7:[2,46],8:[2,47],9:[2,48],10:[2,49],11:[2,50],12:[2,1],181:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//nuestras estructuras
    let errores =[];
   

	
	const instruccionesPY	= require('../src/gram_instr/py.js').instruccionesPY;
    module.exports.clear_vars=clear_vars;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: 
break;
case 3:return 49;
break;
case 4:return 50;
break;
case 5:return 47;
break;
case 6:return 48;
break;
case 7:return 51;
break;
case 8:return 56;
break;
case 9:return 57;
break;
case 10:return 18;
break;
case 11:return 20;
break;
case 12:return 37;
break;
case 13:return 44;
break;
case 14:return 46;
break;
case 15:return 32;
break;
case 16:return 21;
break;
case 17:return 22;
break;
case 18:return 27;
break;
case 19:return 7;
break;
case 20:return 33;
break;
case 21:return 24;
break;
case 22:return 26;
break;
case 23:return 16;
break;
case 24:return 39;
break;
case 25:return 40;
break;
case 26:return 41;
break;
case 27:return 63;
break;
case 28:return 64;
break;
case 29:return 'MASM';
break;
case 30:return 'MENOSM';
break;
case 31:return 9;
break;
case 32:return 11;
break;
case 33:return 12;
break;
case 34:return 14;
break;
case 35:return 25;
break;
case 36:return 23;
break;
case 37:return 45;
break;
case 38:return 65;
break;
case 39:return 66
break;
case 40:return 'MAYOR_I';
break;
case 41:return 'MENOR_I';
break;
case 42:return 31;
break;
case 43:return 'IGUAL_IGUAL';
break;
case 44:return 60;
break;
case 45:return 'MOD';
break;
case 46:return 'NO_IGUAL';
break;
case 47:return 42
break;
case 48:return 61;
break;
case 49:return 62;
break;
case 50:return 'POW';
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); in_html(yy_.yytext); return 58; 
break;
case 53:return 55;
break;
case 54:return 54;
break;
case 55:return 8;
break;
case 56:return 5;
break;
case 57:  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:string\b)/,/^(?:char\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:Console\b)/,/^(?:Write\b)/,/^(?:main\b)/,/^(?:continue\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:==)/,/^(?:!)/,/^(?:%)/,/^(?:!=)/,/^(?:,)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:"[^\"]*")/,/^(?:'[^\'']*')/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gram_py;
exports.Parser = gram_py.Parser;
exports.parse = function () { return gram_py.parse.apply(gram_py, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}