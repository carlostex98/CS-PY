/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gram_json = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,4],$V2=[1,14],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,15],$Vc=[1,16],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[2,5,7,8,13,16,18,19,20,22,25,30,31,35,37,42,44,45,46,47,48,49],$Vj=[1,42],$Vk=[1,47],$Vl=[1,49],$Vm=[1,40],$Vn=[1,41],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,50],$Vt=[1,54],$Vu=[1,55],$Vv=[21,29,40],$Vw=[1,85],$Vx=[1,79],$Vy=[1,80],$Vz=[1,78],$VA=[1,76],$VB=[1,77],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[11,21,29,38,39,40,43,62,63,64,65,66,67,68],$VH=[11,40],$VI=[2,37],$VJ=[2,40],$VK=[8,9,39,55,56,57,58,59,60,62],$VL=[1,120],$VM=[11,21],$VN=[1,124],$VO=[1,154],$VP=[1,155],$VQ=[13,42,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instr_methods":4,"EOF":5,"instr_meth":6,"VOID":7,"IDENTIFICADOR":8,"PAR_A":9,"params":10,"PAR_C":11,"LLAVE_A":12,"LLAVE_C":13,"typo_var":14,"MAIN":15,"IF":16,"asignacion":17,"ELSE":18,"WHILE":19,"DO":20,"PUNTO_C":21,"CONSOLE":22,"PUNTO":23,"WRITE":24,"FOR":25,"var_for":26,"asignacion_icr":27,"lista_v":28,"IGUAL":29,"BREAK":30,"RETURN":31,"asignacion_ret":32,"sms":33,"params2":34,"SWITCH":35,"sw_op":36,"CONTINUE":37,"MAS":38,"MENOS":39,"COMA":40,"casos":41,"CASE":42,"DOS_P":43,"DEFAULT":44,"INT":45,"DOUBLE":46,"STRING":47,"CHAR":48,"BOOLEAN":49,"otro_print":50,"PRINT":51,"PRINTLN":52,"symb":53,"valx":54,"ENTERO":55,"DECIMAL":56,"TRUE":57,"FALSE":58,"CADENA":59,"CADENA_2":60,"unar_op":61,"NOT":62,"AND":63,"OR":64,"POR":65,"DIV":66,"MAYOR":67,"MENOR":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"VOID",8:"IDENTIFICADOR",9:"PAR_A",11:"PAR_C",12:"LLAVE_A",13:"LLAVE_C",15:"MAIN",16:"IF",18:"ELSE",19:"WHILE",20:"DO",21:"PUNTO_C",22:"CONSOLE",23:"PUNTO",24:"WRITE",25:"FOR",29:"IGUAL",30:"BREAK",31:"RETURN",35:"SWITCH",37:"CONTINUE",38:"MAS",39:"MENOS",40:"COMA",42:"CASE",43:"DOS_P",44:"DEFAULT",45:"INT",46:"DOUBLE",47:"STRING",48:"CHAR",49:"BOOLEAN",51:"PRINT",52:"PRINTLN",55:"ENTERO",56:"DECIMAL",57:"TRUE",58:"FALSE",59:"CADENA",60:"CADENA_2",62:"NOT",63:"AND",64:"OR",65:"POR",66:"DIV",67:"MAYOR",68:"MENOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,8],[6,8],[6,7],[6,7],[6,8],[6,4],[6,7],[6,9],[6,7],[6,11],[6,5],[6,3],[6,2],[6,3],[6,3],[6,5],[6,4],[6,7],[6,2],[6,2],[32,0],[32,1],[27,2],[33,2],[33,2],[28,3],[28,1],[36,2],[36,1],[41,4],[41,3],[26,4],[26,3],[34,0],[34,3],[34,1],[10,0],[10,4],[10,2],[14,1],[14,1],[14,1],[14,1],[14,1],[50,1],[50,1],[17,3],[17,1],[54,1],[54,1],[54,1],[54,4],[54,1],[54,1],[54,1],[54,1],[54,3],[54,1],[61,2],[61,2],[53,1],[53,1],[53,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,2],[53,2],[53,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
this.$=instruccionesAPI.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 5:
this.$=instruccionesAPI.nuevoFuncion($$[$0-6],$$[$0-4],$$[$0-7],$$[$0-1]); 
break;
case 6:
this.$=instruccionesAPI.nuevoMetodo($$[$0-5],"vacio",$$[$0-1]); 
break;
case 7:
this.$=instruccionesAPI.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 8:
this.$=instruccionesAPI.nuevoElseIf($$[$0-4],$$[$0-1]);
break;
case 9:
this.$=instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 10:
this.$=instruccionesAPI.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 11:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-2],$$[$0-6]);
break;
case 12:
this.$=instruccionesAPI.nuevoPrint("ln",$$[$0-2]);
break;
case 13:
this.$=instruccionesAPI.nuevoFor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 14:
this.$=instruccionesAPI.nuevoVal($$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 15:
this.$=instruccionesAPI.nuevoVal($$[$0-2],$$[$0-1],"");  
break;
case 16:
this.$=instruccionesAPI.nuevoBreak();
break;
case 17:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 18:
this.$=instruccionesAPI.nuevaUnar($$[$0-1],$$[$0-2]);
break;
case 19:
this.$=instruccionesAPI.nuevollamada($$[$0-4],$$[$0-2]);
break;
case 20:
this.$=instruccionesAPI.nuevoAsig($$[$0-3],$$[$0-1]);
break;
case 21:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 22:
this.$=instruccionesAPI.nuevoContinue();
break;
case 23:
   
break;
case 25: case 43: case 44: case 45: case 46: case 47: case 48: case 49:
this.$=$$[$0]
break;
case 26:
this.$=[$$[$0-1],$$[$0]];
break;
case 27:
this.$=TIPO_OPERACION.INCREMENTO;
break;
case 28:
this.$=TIPO_OPERACION.DECREMENTO;
break;
case 29:
$$[$0-2].push($$[$0]);  
break;
case 30:
this.$=[$$[$0]]; 
break;
case 31:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 32: case 39:
this.$=[$$[$0]];
break;
case 33:
this.$=instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]);
break;
case 34:
this.$=instruccionesAPI.nuevoDefault($$[$0]);
break;
case 35:
this.$=[$$[$0-2],$$[$0]];
break;
case 36:
this.$=[$$[$0-2],$$[$0]]
break;
case 37: case 40:
this.$="";
break;
case 38:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 41:
$$[$0-3].push($$[$0-1]+" -> "+$$[$0]); this.$=$$[$0-3];
break;
case 42:
this.$=[$$[$0-1]+" -> "+$$[$0]];
break;
case 50:
this.$=instruccionesAPI.nuevaOpr($$[$0-2],$$[$0],$$[$0-1]);
break;
case 51: case 61:
this.$=$$[$0];
break;
case 52: case 53:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.NUMERO,$$[$0]);
break;
case 54: case 56: case 57:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.IDENTIFICADOR,$$[$0]);
break;
case 55:
this.$=instruccionesAPI.nuevollamada($$[$0-3],$$[$0-1]);
break;
case 58:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.CADENA,$$[$0]);
break;
case 59:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.CADENA,ht_fix($$[$0]));
break;
case 60:
this.$=instruccionesAPI.nuevoParentesis($$[$0-1]);
break;
case 62:
this.$=instruccionesAPI.nuevaUnar(TIPO_OPERACION.RESTA,$$[$0]);
break;
case 63:
this.$=instruccionesAPI.nuevaUnar(TIPO_OPERACION.NOT,$$[$0]);
break;
case 64:
this.$=TIPO_OPERACION.AND;
break;
case 65:
this.$=TIPO_OPERACION.OR;
break;
case 66:
this.$=TIPO_OPERACION.NO_IGUAL;
break;
case 67:
this.$=TIPO_OPERACION.SUMA;
break;
case 68:
this.$=TIPO_OPERACION.RESTA;
break;
case 69:
this.$=TIPO_OPERACION.MULTIPLICACION;
break;
case 70:
this.$=TIPO_OPERACION.DIVISION;
break;
case 71:
this.$=TIPO_OPERACION.MAYOR_QUE;
break;
case 72:
this.$=TIPO_OPERACION.MENOR_QUE;
break;
case 73:
this.$=TIPO_OPERACION.MAYOR_IGUAL;
break;
case 74:
this.$=TIPO_OPERACION.MENOR_IGUAL;
break;
case 75:
this.$=TIPO_OPERACION.DOBLE_IGUAL;
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{1:[3]},{2:$V0,5:[1,23],6:24,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Vi,[2,3]),{8:[1,25],15:[1,26]},{8:[1,27],28:28},{9:[1,29]},{12:[1,31],16:[1,30]},{9:[1,32]},{12:[1,33]},{23:[1,34]},{9:[1,35]},{21:[1,36]},{8:$Vj,9:$Vk,17:38,21:[2,24],32:37,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{9:[1,52],29:[1,53],33:51,38:$Vt,39:$Vu},{9:[1,56]},{21:[1,57]},{21:[1,58]},{8:[2,43]},{8:[2,44]},{8:[2,45]},{8:[2,46]},{8:[2,47]},{1:[2,1]},o($Vi,[2,2]),{9:[1,59]},{9:[1,60]},o($Vv,[2,30],{9:[1,61]}),{21:[1,63],29:[1,62],40:[1,64]},{8:$Vj,9:$Vk,17:65,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{9:[1,66]},{2:$V0,4:67,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{8:$Vj,9:$Vk,17:68,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{2:$V0,4:69,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{24:[1,70]},{8:[1,73],14:72,26:71,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Vi,[2,16]),{21:[1,74]},{21:[2,25],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($VG,[2,51]),o($VG,[2,52]),o($VG,[2,53]),o($VG,[2,54],{9:[1,86]}),o($VG,[2,56]),o($VG,[2,57]),o($VG,[2,58]),o($VG,[2,59]),{8:$Vj,9:$Vk,17:87,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},o($VG,[2,61]),{8:$Vj,9:$Vk,39:$Vl,54:88,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{8:$Vj,9:$Vk,39:$Vl,54:89,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{21:[1,90]},o($VH,$VI,{54:39,61:48,34:91,17:92,8:$Vj,9:$Vk,39:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,62:$Vs}),{8:$Vj,9:$Vk,17:93,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{38:[1,94]},{39:[1,95]},{8:$Vj,9:$Vk,17:96,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},o($Vi,[2,22]),o($Vi,[2,23]),o($VH,$VJ,{10:97,14:98,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh}),{11:[1,99]},o($VH,$VJ,{14:98,10:100,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh}),{8:$Vj,9:$Vk,17:101,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},o($Vi,[2,15]),{8:[1,102]},{11:[1,103],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{8:$Vj,9:$Vk,17:104,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{2:$V0,6:24,7:$V1,8:$V2,13:[1,105],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{11:[1,106],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{2:$V0,6:24,7:$V1,8:$V2,13:[1,107],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{9:[1,108]},{21:[1,109]},{8:[1,110]},{29:[1,111]},o($Vi,[2,17]),{8:$Vj,9:$Vk,17:112,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},o($VK,[2,64]),o($VK,[2,65]),{29:[1,113]},o($VK,[2,67]),o($VK,[2,68]),o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,71],{29:[1,114]}),o($VK,[2,72],{29:[1,115]}),{29:[1,116]},o($VH,$VI,{54:39,61:48,17:92,34:117,8:$Vj,9:$Vk,39:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,62:$Vs}),{11:[1,118],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($VG,[2,62]),o($VG,[2,63]),o($Vi,[2,18]),{11:[1,119],40:$VL},o($VH,[2,39],{53:75,29:$Vw,38:$Vx,39:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),{21:[1,121],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($VM,[2,27]),o($VM,[2,28]),{11:[1,122],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{11:[1,123],40:$VN},{8:[1,125]},{12:[1,126]},{11:[1,127],40:$VN},{21:[1,128],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($Vv,[2,29]),{12:[1,129]},{11:[1,130],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($Vi,[2,9]),{12:[1,131]},{19:[1,132]},{8:$Vj,9:$Vk,17:133,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{8:$Vj,9:$Vk,17:134,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{29:[1,135]},{8:$Vj,9:$Vk,17:136,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},o([11,21,40,43],[2,50],{53:75,29:$Vw,38:$Vx,39:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VK,[2,66]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),{11:[1,137],40:$VL},o($VG,[2,60]),{21:[1,138]},{8:$Vj,9:$Vk,17:139,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},o($Vi,[2,20]),{12:[1,140]},{12:[1,141]},{14:142,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($VH,[2,42]),{2:$V0,4:143,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{12:[1,144]},o($Vi,[2,14]),{2:$V0,4:145,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{12:[1,146]},{2:$V0,4:147,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{9:[1,148]},{11:[1,149],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{21:[1,150],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{8:$Vj,9:$Vk,17:151,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{21:[2,36],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($VG,[2,55]),o($Vi,[2,19]),o($VH,[2,38],{53:75,29:$Vw,38:$Vx,39:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),{36:152,41:153,42:$VO,44:$VP},{2:$V0,4:156,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{8:[1,157]},{2:$V0,6:24,7:$V1,8:$V2,13:[1,158],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{2:$V0,4:159,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{2:$V0,6:24,7:$V1,8:$V2,13:[1,160],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{2:$V0,4:161,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{2:$V0,6:24,7:$V1,8:$V2,13:[1,162],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{8:$Vj,9:$Vk,17:163,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{21:[1,164]},{8:[1,166],27:165},{21:[2,35],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{13:[1,167],41:168,42:$VO,44:$VP},o($VQ,[2,32]),{8:$Vj,9:$Vk,17:169,39:$Vl,54:39,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:48,62:$Vs},{43:[1,170]},{2:$V0,6:24,7:$V1,8:$V2,13:[1,171],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($VH,[2,41]),o($Vi,[2,6]),{2:$V0,6:24,7:$V1,8:$V2,13:[1,172],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Vi,[2,7]),{2:$V0,6:24,7:$V1,8:$V2,13:[1,173],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Vi,[2,10]),{11:[1,174],29:$Vw,38:$Vx,39:$Vy,53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},o($Vi,[2,12]),{11:[1,175]},{33:176,38:$Vt,39:$Vu},o($Vi,[2,21]),o($VQ,[2,31]),{29:$Vw,38:$Vx,39:$Vy,43:[1,177],53:75,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF},{2:$V0,4:178,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,8]),{21:[1,179]},{12:[1,180]},{11:[2,26]},{2:$V0,4:181,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($VQ,[2,34],{14:5,6:24,2:$V0,7:$V1,8:$V2,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh}),o($Vi,[2,11]),{2:$V0,4:182,6:3,7:$V1,8:$V2,14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($VQ,[2,33],{14:5,6:24,2:$V0,7:$V1,8:$V2,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh}),{2:$V0,6:24,7:$V1,8:$V2,13:[1,183],14:5,16:$V3,18:$V4,19:$V5,20:$V6,22:$V7,25:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Vi,[2,13])],
defaultActions: {18:[2,43],19:[2,44],20:[2,45],21:[2,46],22:[2,47],23:[2,1],176:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//nuestras estructuras
    


	const TIPO_OPERACION	= require('../src/gram_instr/instr_js').TIPO_OPERACION;
	const TIPO_VAL		= require('../src/gram_instr/instr_js').TIPO_VAL;
	const instruccionesAPI	= require('../src/gram_instr/instr_js').instruccionesAPI;
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:  
break;
case 3:return 47;
break;
case 4:return 48;
break;
case 5:return 45;
break;
case 6:return 46;
break;
case 7:return 49;
break;
case 8:return 57;
break;
case 9:return 58;
break;
case 10:return 16;
break;
case 11:return 18;
break;
case 12:return 35;
break;
case 13:return 42;
break;
case 14:return 44;
break;
case 15:return 30;
break;
case 16:return 19;
break;
case 17:return 20;
break;
case 18:return 25;
break;
case 19:return 7;
break;
case 20:return 31;
break;
case 21:return 22;
break;
case 22:return 24;
break;
case 23:return 15;
break;
case 24:return 37;
break;
case 25:return 38;
break;
case 26:return 39;
break;
case 27:return 65;
break;
case 28:return 66;
break;
case 29:return 'MASM';
break;
case 30:return 'MENOSM';
break;
case 31:return 9;
break;
case 32:return 11;
break;
case 33:return 12;
break;
case 34:return 13;
break;
case 35:return 23;
break;
case 36:return 21;
break;
case 37:return 43;
break;
case 38:return 67;
break;
case 39:return 68
break;
case 40:return 'MAYOR_I';
break;
case 41:return 'MENOR_I';
break;
case 42:return 29;
break;
case 43:return 'IGUAL_IGUAL';
break;
case 44:return 62;
break;
case 45:return 'MOD';
break;
case 46:return 'NO_IGUAL';
break;
case 47:return 40
break;
case 48:return 63;
break;
case 49:return 64;
break;
case 50:return 'POW';
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 53:return 56;
break;
case 54:return 55;
break;
case 55:return 8;
break;
case 56:return 5;
break;
case 57: 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:string\b)/,/^(?:char\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:bool\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:Console\b)/,/^(?:Write\b)/,/^(?:main\b)/,/^(?:continue\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:==)/,/^(?:!)/,/^(?:%)/,/^(?:!=)/,/^(?:,)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:"[^\"]*")/,/^(?:'[^\'']*')/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gram_json;
exports.Parser = gram_json.Parser;
exports.parse = function () { return gram_json.parse.apply(gram_json, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}