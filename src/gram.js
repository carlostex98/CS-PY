/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gram = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[2,5,15,51,52,53,54,55],$V8=[18,46],$V9=[2,46],$Va=[1,26],$Vb=[1,46],$Vc=[1,43],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,41],$Vk=[1,42],$Vl=[1,44],$Vm=[1,45],$Vn=[2,11,13,23,24,25,26,27,31,36,37,41,43,48,50,51,52,53,54,55],$Vo=[1,67],$Vp=[1,71],$Vq=[1,73],$Vr=[1,65],$Vs=[1,66],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,74],$Vx=[1,78],$Vy=[1,79],$Vz=[9,35,46],$VA=[1,102],$VB=[1,103],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[9,18,44,45,46,49,67,68,69,70,71,72,73,74,75,76,77,78],$VP=[2,43],$VQ=[11,16,45,60,61,62,63,64,66],$VR=[1,140],$VS=[9,18],$VT=[1,167],$VU=[1,168],$VV=[13,48,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instr_methods":4,"EOF":5,"instr_main":6,"IMPORT":7,"asignacion":8,"PUNTO_C":9,"CLASS":10,"IDENTIFICADOR":11,"LLAVE_A":12,"LLAVE_C":13,"instr_meth":14,"VOID":15,"PAR_A":16,"params":17,"PAR_C":18,"instr_general":19,"typo_var":20,"MAIN":21,"instr":22,"IF":23,"ELSE":24,"WHILE":25,"DO":26,"SYSTEM":27,"PUNTO":28,"OUT":29,"otro_print":30,"FOR":31,"var_for":32,"asignacion_icr":33,"lista_v":34,"IGUAL":35,"BREAK":36,"RETURN":37,"asignacion_ret":38,"sms":39,"params2":40,"SWITCH":41,"sw_op":42,"CONTINUE":43,"MAS":44,"MENOS":45,"COMA":46,"casos":47,"CASE":48,"DOS_P":49,"DEFAULT":50,"INT":51,"DOUBLE":52,"STRING":53,"CHAR":54,"BOOLEAN":55,"PRINT":56,"PRINTLN":57,"symb":58,"valx":59,"ENTERO":60,"DECIMAL":61,"TRUE":62,"FALSE":63,"CADENA":64,"unar_op":65,"NOT":66,"AND":67,"OR":68,"NO_IGUAL":69,"POR":70,"DIV":71,"POW":72,"MAYOR":73,"MENOR":74,"MAYOR_I":75,"MENOR_I":76,"IGUAL_IGUAL":77,"MOD":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IMPORT",9:"PUNTO_C",10:"CLASS",11:"IDENTIFICADOR",12:"LLAVE_A",13:"LLAVE_C",15:"VOID",16:"PAR_A",18:"PAR_C",21:"MAIN",23:"IF",24:"ELSE",25:"WHILE",26:"DO",27:"SYSTEM",28:"PUNTO",29:"OUT",31:"FOR",35:"IGUAL",36:"BREAK",37:"RETURN",41:"SWITCH",43:"CONTINUE",44:"MAS",45:"MENOS",46:"COMA",48:"CASE",49:"DOS_P",50:"DEFAULT",51:"INT",52:"DOUBLE",53:"STRING",54:"CHAR",55:"BOOLEAN",56:"PRINT",57:"PRINTLN",60:"ENTERO",61:"DECIMAL",62:"TRUE",63:"FALSE",64:"CADENA",66:"NOT",67:"AND",68:"OR",69:"NO_IGUAL",70:"POR",71:"DIV",72:"POW",73:"MAYOR",74:"MENOR",75:"MAYOR_I",76:"MENOR_I",77:"IGUAL_IGUAL",78:"MOD"},
productions_: [0,[3,2],[6,3],[6,5],[6,2],[4,2],[4,1],[14,8],[14,8],[14,7],[14,2],[19,2],[19,1],[22,7],[22,8],[22,4],[22,7],[22,9],[22,9],[22,11],[22,5],[22,3],[22,2],[22,3],[22,3],[22,5],[22,4],[22,7],[22,2],[22,2],[38,0],[38,1],[33,2],[39,2],[39,2],[34,3],[34,1],[42,2],[42,1],[47,4],[47,3],[32,4],[32,3],[40,0],[40,3],[40,1],[17,0],[17,4],[17,2],[20,1],[20,1],[20,1],[20,1],[20,1],[30,1],[30,1],[8,3],[8,1],[59,1],[59,1],[59,1],[59,4],[59,1],[59,1],[59,1],[59,3],[59,1],[65,2],[65,2],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return [$$[$0-1],errores, nombres];
break;
case 2:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]); 
break;
case 3:
 this.$ = instruccionesAPI.nuevoClass($$[$0-3],$$[$0-1]); in_var("Class", $$[$0-3]);
break;
case 4: case 10: case 29:
  in_err("Sintactico",this._$.first_line,this._$.first_column,yytext); 
break;
case 5:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6:
this.$ = [$$[$0]];
break;
case 7:
this.$=instruccionesAPI.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]); in_var("Void", $$[$0-6]);
break;
case 8:
this.$=instruccionesAPI.nuevoFuncion($$[$0-6],$$[$0-4],$$[$0-7],$$[$0-1]); in_var("Funcion", $$[$0-6]);
break;
case 9:
this.$=instruccionesAPI.nuevoMetodo($$[$0-5],"vacio",$$[$0-1]); in_var("main", "main");
break;
case 11:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 12:
 this.$ = [$$[$0]]; 
break;
case 13:
this.$=instruccionesAPI.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 14:
this.$=instruccionesAPI.nuevoElseIf($$[$0-4],$$[$0-1]);
break;
case 15:
this.$=instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 16:
this.$=instruccionesAPI.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 17:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-2],$$[$0-6]);
break;
case 18:
this.$=instruccionesAPI.nuevoPrint($$[$0-4],$$[$0-2]);
break;
case 19:
this.$=instruccionesAPI.nuevoFor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 20:
this.$=instruccionesAPI.nuevoVal($$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 21:
this.$=instruccionesAPI.nuevoVal($$[$0-2],$$[$0-1],"");  
break;
case 22:
this.$=instruccionesAPI.nuevoBreak();
break;
case 23:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 24:
this.$=instruccionesAPI.nuevaUnar($$[$0-1],$$[$0-2]);
break;
case 25:
this.$=instruccionesAPI.nuevollamada($$[$0-4],$$[$0-2]);
break;
case 26:
this.$=instruccionesAPI.nuevoAsig($$[$0-3],$$[$0-1]);
break;
case 27:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 28:
this.$=instruccionesAPI.nuevoContinue();
break;
case 31: case 49: case 50: case 51: case 52: case 53: case 54: case 55:
this.$=$$[$0]
break;
case 32:
this.$=[$$[$0-1],$$[$0]];
break;
case 33:
this.$=TIPO_OPERACION.INCREMENTO;
break;
case 34:
this.$=TIPO_OPERACION.DECREMENTO;
break;
case 35:
$$[$0-2].push($$[$0]); in_var("Variable", $$[$0]); 
break;
case 36:
this.$=[$$[$0]]; in_var("Variable", $$[$0]);
break;
case 37:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 38: case 45:
this.$=[$$[$0]];
break;
case 39:
this.$=instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]);
break;
case 40:
this.$=instruccionesAPI.nuevoDefault($$[$0]);
break;
case 41:
this.$=[$$[$0-2],$$[$0]];
break;
case 42:
this.$=[$$[$0-2],$$[$0]]
break;
case 43: case 46:
this.$="";
break;
case 44:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 47:
$$[$0-3].push($$[$0-1]+" -> "+$$[$0]); this.$=$$[$0-3];
break;
case 48:
this.$=[$$[$0-1]+" -> "+$$[$0]];
break;
case 56:
this.$=instruccionesAPI.nuevaOpr($$[$0-2],$$[$0],$$[$0-1]);
break;
case 57: case 66:
this.$=$$[$0];
break;
case 58: case 59:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.NUMERO,$$[$0]);
break;
case 60: case 62: case 63:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.IDENTIFICADOR,$$[$0]);
break;
case 61:
this.$=instruccionesAPI.nuevollamada($$[$0-3],$$[$0-1]);
break;
case 64:
this.$=instruccionesAPI.nuevoValorAsg(TIPO_VAL.CADENA,$$[$0]);
break;
case 65:
this.$=instruccionesAPI.nuevoParentesis($$[$0-1]);
break;
case 67:
this.$=instruccionesAPI.nuevaUnar(TIPO_OPERACION.RESTA,$$[$0]);
break;
case 68:
this.$=instruccionesAPI.nuevaUnar(TIPO_OPERACION.NOT,$$[$0]);
break;
case 69:
this.$=TIPO_OPERACION.AND;
break;
case 70:
this.$=TIPO_OPERACION.OR;
break;
case 71:
this.$=TIPO_OPERACION.NO_IGUAL;
break;
case 72:
this.$=TIPO_OPERACION.SUMA;
break;
case 73:
this.$=TIPO_OPERACION.RESTA;
break;
case 74:
this.$=TIPO_OPERACION.MULTIPLICACION;
break;
case 75:
this.$=TIPO_OPERACION.DIVISION;
break;
case 76:
this.$=TIPO_OPERACION.POW;
break;
case 77:
this.$=TIPO_OPERACION.MAYOR_QUE;
break;
case 78:
this.$=TIPO_OPERACION.MENOR_QUE;
break;
case 79:
this.$=TIPO_OPERACION.MAYOR_IGUAL;
break;
case 80:
this.$=TIPO_OPERACION.MENOR_IGUAL;
break;
case 81:
this.$=TIPO_OPERACION.DOBLE_IGUAL;
break;
case 82:
this.$=TIPO_OPERACION.MODULO
break;
}
},
table: [{2:$V0,3:1,4:2,14:3,15:$V1,20:5,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{1:[3]},{2:$V0,5:[1,12],14:13,15:$V1,20:5,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($V7,[2,6]),{11:[1,14],21:[1,15]},{11:[1,16]},{13:[1,17]},{11:[2,49]},{11:[2,50]},{11:[2,51]},{11:[2,52]},{11:[2,53]},{1:[2,1]},o($V7,[2,5]),{16:[1,18]},{16:[1,19]},{16:[1,20]},o($V7,[2,10]),o($V8,$V9,{17:21,20:22,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6}),{18:[1,23]},o($V8,$V9,{20:22,17:24,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6}),{18:[1,25],46:$Va},{11:[1,27]},{12:[1,28]},{18:[1,29],46:$Va},{12:[1,30]},{20:31,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($V8,[2,48]),{2:$Vb,11:$Vc,19:32,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{12:[1,47]},{2:$Vb,11:$Vc,19:48,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{11:[1,49]},{2:$Vb,11:$Vc,13:[1,50],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($Vn,[2,12]),{16:[1,52]},{12:[1,54],23:[1,53]},{16:[1,55]},{12:[1,56]},{28:[1,57]},{16:[1,58]},{11:[1,60],34:59},{9:[1,61]},{8:63,9:[2,30],11:$Vo,16:$Vp,38:62,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{16:[1,76],35:[1,77],39:75,44:$Vx,45:$Vy},{16:[1,80]},{9:[1,81]},{9:[1,82]},{2:$Vb,11:$Vc,19:83,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{2:$Vb,11:$Vc,13:[1,84],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($V8,[2,47]),o($V7,[2,9]),o($Vn,[2,11]),{8:85,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{16:[1,86]},{2:$Vb,11:$Vc,19:87,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{8:88,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{2:$Vb,11:$Vc,19:89,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{29:[1,90]},{11:[1,93],20:92,32:91,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{9:[1,95],35:[1,94],46:[1,96]},o($Vz,[2,36]),o($Vn,[2,22]),{9:[1,97]},{9:[2,31],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($VO,[2,57]),o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60],{16:[1,113]}),o($VO,[2,62]),o($VO,[2,63]),o($VO,[2,64]),{8:114,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},o($VO,[2,66]),{11:$Vo,16:$Vp,45:$Vq,59:115,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{11:$Vo,16:$Vp,45:$Vq,59:116,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{9:[1,117]},o($V8,$VP,{59:64,65:72,40:118,8:119,11:$Vo,16:$Vp,45:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw}),{8:120,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{44:[1,121]},{45:[1,122]},{8:123,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},o($Vn,[2,28]),o($Vn,[2,29]),{2:$Vb,11:$Vc,13:[1,124],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($V7,[2,7]),{18:[1,125],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{8:126,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{2:$Vb,11:$Vc,13:[1,127],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{18:[1,128],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{2:$Vb,11:$Vc,13:[1,129],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{28:[1,130]},{9:[1,131]},{11:[1,132]},{35:[1,133]},{8:134,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},o($Vn,[2,21]),{11:[1,135]},o($Vn,[2,23]),{8:136,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76]),o($VQ,[2,77]),o($VQ,[2,78]),o($VQ,[2,79]),o($VQ,[2,80]),o($VQ,[2,81]),o($VQ,[2,82]),o($V8,$VP,{59:64,65:72,8:119,40:137,11:$Vo,16:$Vp,45:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw}),{18:[1,138],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($VO,[2,67]),o($VO,[2,68]),o($Vn,[2,24]),{18:[1,139],46:$VR},o($V8,[2,45],{58:98,44:$VA,45:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN}),{9:[1,141],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($VS,[2,33]),o($VS,[2,34]),{18:[1,142],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($V7,[2,8]),{12:[1,143]},{18:[1,144],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($Vn,[2,15]),{12:[1,145]},{25:[1,146]},{30:147,56:[1,148],57:[1,149]},{8:150,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{35:[1,151]},{8:152,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{9:[1,153],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($Vz,[2,35]),o([9,18,46,49],[2,56],{58:98,44:$VA,45:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN}),{18:[1,154],46:$VR},o($VO,[2,65]),{9:[1,155]},{8:156,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},o($Vn,[2,26]),{12:[1,157]},{2:$Vb,11:$Vc,19:158,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{12:[1,159]},{2:$Vb,11:$Vc,19:160,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{16:[1,161]},{16:[1,162]},{16:[2,54]},{16:[2,55]},{9:[1,163],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{8:164,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{9:[2,42],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},o($Vn,[2,20]),o($VO,[2,61]),o($Vn,[2,25]),o($V8,[2,44],{58:98,44:$VA,45:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN}),{42:165,47:166,48:$VT,50:$VU},{2:$Vb,11:$Vc,13:[1,169],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{2:$Vb,11:$Vc,19:170,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{2:$Vb,11:$Vc,13:[1,171],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},{8:172,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{8:173,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{11:[1,175],33:174},{9:[2,41],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{13:[1,176],47:177,48:$VT,50:$VU},o($VV,[2,38]),{8:178,11:$Vo,16:$Vp,45:$Vq,59:64,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:72,66:$Vw},{49:[1,179]},o($Vn,[2,13]),{2:$Vb,11:$Vc,13:[1,180],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($Vn,[2,16]),{18:[1,181],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{18:[1,182],44:$VA,45:$VB,58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{18:[1,183]},{39:184,44:$Vx,45:$Vy},o($Vn,[2,27]),o($VV,[2,37]),{44:$VA,45:$VB,49:[1,185],58:98,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN},{2:$Vb,11:$Vc,19:186,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($Vn,[2,14]),{9:[1,187]},{9:[1,188]},{12:[1,189]},{18:[2,32]},{2:$Vb,11:$Vc,19:190,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($VV,[2,40],{20:40,22:51,2:$Vb,11:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6}),o($Vn,[2,17]),o($Vn,[2,18]),{2:$Vb,11:$Vc,19:191,20:40,22:33,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($VV,[2,39],{20:40,22:51,2:$Vb,11:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6}),{2:$Vb,11:$Vc,13:[1,192],20:40,22:51,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,31:$Vi,36:$Vj,37:$Vk,41:$Vl,43:$Vm,51:$V2,52:$V3,53:$V4,54:$V5,55:$V6},o($Vn,[2,19])],
defaultActions: {7:[2,49],8:[2,50],9:[2,51],10:[2,52],11:[2,53],12:[2,1],148:[2,54],149:[2,55],184:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//nuestras estructuras
    let errores =[];
    let nombres=[];
    let comm=[];
    let ht = [];
    
    function in_err(tipo, lin, col, decrip){
        var c={id:errores.length, tipo:tipo, linea:lin, columna:col, descripcion:decrip};
        errores.push(c);
    }
    function in_var(tipo, nombre){
        var c = {tipo:tipo, nombre:nombre};
        nombres.push(c);
    }
    function in_comment(texto, ln, cl){
        var c = [texto, ln, cl];
        comm.push(c);
    }

    function in_html(texto){
        ht.push(texto);
    }

    function clear_vars(){
        errores=[];
        nombres=[];
        comm=[];
        ht = [];
    }

	const TIPO_OPERACION	= require('../src/gram_instr/instr').TIPO_OPERACION;
	const TIPO_VAL		= require('../src/gram_instr/instr').TIPO_VAL;
	const instruccionesAPI	= require('../src/gram_instr/instr').instruccionesAPI;
    module.exports.clear_vars=clear_vars;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:in_comment(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
case 2: in_comment(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); 
break;
case 3:return 53;
break;
case 4:return 54;
break;
case 5:return 51;
break;
case 6:return 52;
break;
case 7:return 55;
break;
case 8:return 62;
break;
case 9:return 63;
break;
case 10:return 23;
break;
case 11:return 24;
break;
case 12:return 41;
break;
case 13:return 48;
break;
case 14:return 50;
break;
case 15:return 36;
break;
case 16:return 25;
break;
case 17:return 26;
break;
case 18:return 31;
break;
case 19:return 15;
break;
case 20:return 37;
break;
case 21:return 27;
break;
case 22:return 29;
break;
case 23:return 57;
break;
case 24:return 21;
break;
case 25:return 56;
break;
case 26:return 43;
break;
case 27:return 44;
break;
case 28:return 45;
break;
case 29:return 70;
break;
case 30:return 71;
break;
case 31:return 'MASM';
break;
case 32:return 'MENOSM';
break;
case 33:return 16;
break;
case 34:return 18;
break;
case 35:return 12;
break;
case 36:return 13;
break;
case 37:return 28;
break;
case 38:return 9;
break;
case 39:return 49;
break;
case 40:return 73;
break;
case 41:return 74
break;
case 42:return 75;
break;
case 43:return 76;
break;
case 44:return 35;
break;
case 45:return 77;
break;
case 46:return 66;
break;
case 47:return 78;
break;
case 48:return 69;
break;
case 49:return 46
break;
case 50:return 67;
break;
case 51:return 68;
break;
case 52:return 72;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); in_html(yy_.yytext); return 64; 
break;
case 55:return 61;
break;
case 56:return 60;
break;
case 57:return 11;
break;
case 58:return 5;
break;
case 59: in_err("Lexico", yy_.yylloc.first_line,yy_.yylloc.first_column, "El caracter("+yy_.yytext+")no pertenece al lenguaje"); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:string\b)/,/^(?:char\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:continue\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:==)/,/^(?:!)/,/^(?:%)/,/^(?:!=)/,/^(?:,)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:"[^\"]*")/,/^(?:'[^\'']*')/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gram;
exports.Parser = gram.Parser;
exports.parse = function () { return gram.parse.apply(gram, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}